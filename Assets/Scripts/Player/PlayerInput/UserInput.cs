//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Player/PlayerInput/UserInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Madicine.Player
{
    public partial class @UserInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @UserInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMove"",
            ""id"": ""2233ce8d-b2c6-4d93-8a3c-5a9daf529a57"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""5832b6c6-1148-4dfc-807b-c6ff6859d692"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attact"",
                    ""type"": ""Value"",
                    ""id"": ""6f85f503-8952-4b8a-8a8a-f17dfa551b53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""95548acf-d881-4cb9-a21e-0d913295cd7a"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bd7ec29b-5304-4748-9cfc-6d245624dc58"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c467109f-dc2e-4e8e-98f5-0197f4fd65c4"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""9ec35cd9-fbfd-4237-b759-19eadc4dad43"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""9078ad7f-d22b-415b-bcfb-5d440efd3240"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""move"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6f596f6b-86ee-4e9f-887a-e5f6c6f1841f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""move"",
                    ""action"": ""Attact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""move"",
            ""bindingGroup"": ""move"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerMove
            m_PlayerMove = asset.FindActionMap("PlayerMove", throwIfNotFound: true);
            m_PlayerMove_Move = m_PlayerMove.FindAction("Move", throwIfNotFound: true);
            m_PlayerMove_Attact = m_PlayerMove.FindAction("Attact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMove
        private readonly InputActionMap m_PlayerMove;
        private IPlayerMoveActions m_PlayerMoveActionsCallbackInterface;
        private readonly InputAction m_PlayerMove_Move;
        private readonly InputAction m_PlayerMove_Attact;
        public struct PlayerMoveActions
        {
            private @UserInput m_Wrapper;
            public PlayerMoveActions(@UserInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PlayerMove_Move;
            public InputAction @Attact => m_Wrapper.m_PlayerMove_Attact;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMove; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMoveActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerMoveActions instance)
            {
                if (m_Wrapper.m_PlayerMoveActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnMove;
                    @Attact.started -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnAttact;
                    @Attact.performed -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnAttact;
                    @Attact.canceled -= m_Wrapper.m_PlayerMoveActionsCallbackInterface.OnAttact;
                }
                m_Wrapper.m_PlayerMoveActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Attact.started += instance.OnAttact;
                    @Attact.performed += instance.OnAttact;
                    @Attact.canceled += instance.OnAttact;
                }
            }
        }
        public PlayerMoveActions @PlayerMove => new PlayerMoveActions(this);
        private int m_moveSchemeIndex = -1;
        public InputControlScheme moveScheme
        {
            get
            {
                if (m_moveSchemeIndex == -1) m_moveSchemeIndex = asset.FindControlSchemeIndex("move");
                return asset.controlSchemes[m_moveSchemeIndex];
            }
        }
        public interface IPlayerMoveActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnAttact(InputAction.CallbackContext context);
        }
    }
}
